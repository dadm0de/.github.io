######################################
#   Starship.RS Configuration File   # 
#            by: Dadm0de             #
######################################

# Went through the entire Starship.RS Configuration page, and Advanced 
# Configuration page and attempted to put everything at their default
# values for easier editing. This would have really helped me when I first
# started trying to configure Starship.RS Prompts.

# Get editor completions based on the config schema
"$schema" = 'https://starship.rs/config-schema.json'

# All/most package modules disabled by default to show
# of will only show under certian conditions.
# [module]
# disabled = false

# Terminology

# Module: A component in the prompt giving information based on contextual 
# information from your OS. For example, the "nodejs" module shows the version
# of Node.js that is currently installed on your computer, if your current 
# directory is a Node.js project.

# Variable: Smaller sub-components that contain information provided by the 
# module. For example, the "version" variable in the "nodejs" module contains 
# the current version of Node.js.

# By convention, most modules have a prefix of default terminal color 
# (e.g. via in "nodejs") and an empty space as a suffix.

# Strings
# In TOML syntax, text values are declared with ', ", ''', or """.

# The following Starship syntax symbols have special usage in a format string 
# and must be escaped to display as that character: $ [ ] ( ). to escape put a \

# Style Strings [not case sensetive] bold, italic, underline, dimmed, inverted, blink, 
# hidden, strikethrough, bg:<color>, fg:<color>, <color> none

# PROMPT Instructions:

# Symbol	Type	                    Notes
# '	        literal string	            less escaping
# "	        string	                    more escaping
# '''	    multi-line literal string	less escaping
# """	    multi-line string	        more escaping, newlines in declarations 
#                                       can be ignored

# # literal string
# format = '‚ò∫\‚òª '

# # regular string
# format = "‚ò∫\\‚òª "

# # escaping Starship symbols
# format = '\[\$\] '

# # with literal string
# format = '''

# \$'''

# # with multiline basic string
# format = """

# \\$"""

# # with basic string
# format = "\n\\$"

# In multiline basic strings, newlines can be used for formatting without being 
# present in the value by escaping them.
# format = """
# line1\
# line1\
# line1
# line2\
# line2\
# line2
# """

# Prompt - This is the list of prompt-wide configuration options.
# PROMPT OPTIONS started editing below this point...
# Configure the format of the prompt
format = '$all' 

# If you just want to extend the default format, you can use $all; modules you 
# explicitly add to the format will not be duplicated. Eg.
# # Move the directory to the second line
# format = '$all$directory$character'

# Use custom format example prompt, would put styling in the module format below for simplicity. 
# format = '''
# [‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ>](bold green)
# [‚îÇ](bold green)$directory$rust$package
# [‚îî‚îÄ>](bold green) '''

#kali linux style PROMPT
# format = """
# [[‚îå‚îÄ‚îÄ](blue)\\[$sudo$username$hostname\\]-\\[$directory\\] ](blue)$git_branch$git_commit$git_state$git_metrics$git_status$docker_context$dart$dotnet$golang$nodejs$php$python$ruby$rust$fill$cmd_duration$jobs$battery$status$time
# [‚îî‚îÄ](blue)$character"""

# Some shells support a right prompt which renders on the same line as the input
# right_format = '$all'
# Also can use the $fill module to push items to the right side. see below.

# Timeout for starship to scan files (in milliseconds). default 30 
scan_timeout = 10 

# Timeout for commands executed by starship (in milliseconds). default 500
# command_timeout = 500 

# Inserts blank line between shell prompts.
add_newline = true

# Sets which color palette from palettes to use.
# pallete = 'name_of_pallete'

# Collection of color palettes that assign colors to user-defined names. Note that 
# color palettes cannot reference their own color definitions.
# [palletes.name_of_pallets]

# #Examples
# # Set 'foo' as custom color palette
# palette = 'foo'
# # Define custom colors
# [palettes.foo]
# # Overwrite existing color
# blue = '21'
# # Define new color
# mustard = '#af8700'

# #variable names in format = '$all'
# # Which is equivalent to
# format = """
# $username\
# $hostname\
# $localip\
# $shlvl\
# $singularity\
# $kubernetes\
# $directory\
# $vcsh\
# $fossil_branch\
# $fossil_metrics\
# $git_branch\
# $git_commit\
# $git_state\
# $git_metrics\
# $git_status\
# $hg_branch\
# $pijul_channel\
# $docker_context\
# $package\
# $c\
# $cmake\
# $cobol\
# $daml\
# $dart\
# $deno\
# $dotnet\
# $elixir\
# $elm\
# $erlang\
# $fennel\
# $gleam\
# $golang\
# $guix_shell\
# $haskell\
# $haxe\
# $helm\
# $java\
# $julia\
# $kotlin\
# $gradle\
# $lua\
# $nim\
# $nodejs\
# $ocaml\
# $opa\
# $perl\
# $php\
# $pulumi\
# $purescript\
# $python\
# $quarto\
# $raku\
# $rlang\
# $red\
# $ruby\
# $rust\
# $scala\
# $solidity\
# $swift\
# $terraform\
# $typst\
# $vlang\
# $vagrant\
# $zig\
# $buf\
# $nix_shell\
# $conda\
# $meson\
# $spack\
# $memory_usage\
# $aws\
# $gcloud\
# $openstack\
# $azure\
# $nats\
# $direnv\
# $env_var\
# $crystal\
# $custom\
# $sudo\
# $cmd_duration\
# $line_break\
# $jobs\
# $battery\
# $time\
# $status\
# $os\
# $container\
# $shell\
# $character"""

# modules/variables copying thier default values change as needed. I would make changes 
# and #comment defaults after = or just copy and paste what you want to change, cause
# the config will naturally go to the default settings unless stated otherwise in the config
# file. As you will notice in some of the examples, not all options are present.

# The aws module shows the current AWS region and profile and an expiration timer 
# when using temporary credentials.
[aws] 
format = 'on [$symbol($profile )(\($region\) )(\[$duration\] )]($style)'
symbol = '‚òÅÔ∏è '
style = 'bold yellow'
expiration_symbol = 'X'
disabled = false
force_display = false
# [aws.region_aliases] 
# [aws.profile_aliases]

# aws example
# [aws]
# format = 'on [$symbol($profile )(\($region\) )]($style)'
# style = 'bold blue'
# symbol = 'üÖ∞ '
# [aws.region_aliases]
# ap-southeast-2 = 'au'
# us-east-1 = 'va'
# [aws.profile_aliases]
# CompanyGroupFrobozzOnCallAccess = 'Frobozz'

# The azure module shows the current Azure Subscription.
[azure]
disabled = true
format = 'on [$symbol($subscription)]($style) '
symbol = 'Û∞†Ö '
style = 'blue bold'
# [azure.subscription_aliases]

# Azure Examples
# Display Subscription Name
# [azure]
# disabled = false
# format = 'on [$symbol($subscription)]($style) '
# symbol = 'Û∞†Ö '
# style = 'blue bold'

# Display Username
# [azure]
# disabled = false
# format = "on [$symbol($username)]($style) "
# symbol = "Û∞†Ö "
# style = "blue bold"

# Display Subscription Name Alias
# [azure.subscription_aliases]
# very-long-subscription-name = 'vlsn'

# The battery module shows how charged the device's battery is and its 
# current charging status.
[battery]
disabled = false
format = '[$symbol$percentage]($style) '
full_symbol = 'Û∞Åπ '
charging_symbol = 'Û∞ÇÑ '
discharging_symbol = 'Û∞ÇÉ '
unknown_symbol = 'Û∞ÅΩ '
empty_symbol = 'Û∞Çé '
[[battery.display]] 
threshold = 10
style = 'bold red'
charging_symbol = ' '
discharging_symbol = ' '

# Battery Example
# [battery]
# full_symbol = 'üîã '
# charging_symbol = '‚ö°Ô∏è '
# discharging_symbol = 'üíÄ '
# [[battery.display]] # 'bold red' style and discharging_symbol when capacity is between 0% and 10%
# threshold = 10
# style = 'bold red'
# [[battery.display]] # 'bold yellow' style and üí¶ symbol when capacity is between 10% and 30%
# threshold = 30
# style = 'bold yellow'
# discharging_symbol = 'üí¶ 

# The buf module shows the currently installed version of Buf.
[buf]
disabled = false
format ='with [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üêÉ '
detect_files = ['buf.yaml', 'buf.gen.yaml', 'buf.work.yaml']
style = 'bold blue'

# buf example
# [buf]
# symbol = 'ü¶¨ '

# The bun module shows the currently installed version of the bun JavaScript runtime.
[bun]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'ü•ü '
detect_files = ['bun.lockb', 'bunfig.toml']
style = 'bold red'
# detect_extensions = []
# detect_folders = []

# bun example
# [bun]
# format = 'via [üçî $version](bold green) '

# The c module shows some information about your C compiler.
[c]
disabled = false
format = 'via [$symbol($version(-$name) )]($style)'
version_format = 'v${raw}'
symbol = 'C '
detect_extensions = ['c', 'h']
commands = [ [ 'cc', '--version' ], [ 'gcc', '--version' ], [ 'clang', '--version' ] ]
style = 'bold 149'
# detect_files = []
# detect_folders = []

# c example
# [c]
# format = 'via [$name $version]($style)'

# The character module shows a character (usually an arrow) beside where the 
# text is entered in your terminal.
[character]
disabled = false
format = '$symbol '
success_symbol = '[‚ùØ](bold green)'
error_symbol = '[‚ùØ](bold red)'
vimcmd_symbol = '[‚ùÆ](bold green)'
vimcmd_replace_one_symbol = '[‚ùÆ](bold purple)'
vimcmd_replace_symbol = '[‚ùÆ](bold purple)'
vimcmd_visual_symbol = '[‚ùÆ](bold yellow)'

# character example

# With custom error shape
# [character]
# success_symbol = '[‚ûú](bold green) '
# error_symbol = '[‚úó](bold red) '

# Without custom error shape
# [character]
# success_symbol = '[‚ûú](bold green) '
# error_symbol = '[‚ûú](bold red) '

# With custom vim shape
# [character]
# vimcmd_symbol = '[V](bold green) '

# The cmake module shows the currently installed version of CMake.
[cmake] # no examples provided in the config
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = '‚ñ≥ '
detect_files = ['CMakeLists.txt', 'CMakeCache.txt']
style = 'bold blue'
# detect_extensions = []
# detect_folders = []

# The cobol module shows the currently installed version of COBOL.
[cobol] # no exmamples provided in the config
disabled = false
symbol = '‚öôÔ∏è '
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
style = 'bold blue'
detect_extensions = ['cbl', 'cob', 'CBL', 'COB']
# detect_files = []
# detect_folders = []

# The cmd_duration module shows how long the last command took to execute.
[cmd_duration]
disabled = false
min_time = 2_000
show_milliseconds = false
format = 'took [$duration]($style) '
style = 'bold yellow'
show_notifications = false
min_time_to_notify = 45_000
# notification_timeout = #commented out cause no default value

# cmd_duration example
# [cmd_duration]
# min_time = 500
# format = 'underwent [$duration](bold yellow)'

# The conda module shows the current Conda environment, if $CONDA_DEFAULT_ENV is set.
[conda]
disabled = false
truncation_length = 1
symbol = 'üÖí '
style = 'bold green'
format = 'via [$symbol$environment]($style) '
ignore_base = true

# conda example
# [conda]
# format = '[$symbol$environment](dimmed green) '

# The container module displays a symbol and container name, if inside a container.
[container]
disabled = false
symbol = '‚¨¢'
style = 'bold red dimmed'
format = '[$symbol \[$name\]]($style) '

# container exmaple
# [container]
# format = '[$symbol \[$name\]]($style) '

# The crystal module shows the currently installed version of Crystal.
[crystal]
disabled = false
symbol = 'üîÆ '
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
style = 'bold red'
detect_extensions = ['cr']
detect_files = ['shard.yml']
# detect_folders = []

# crystal example
# [crystal]
# format = 'via [‚ú® $version](bold blue) '

# The daml module shows the currently used Daml SDK version when you are in 
# the root directory of your Daml project.
[daml]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'Œõ '
style = 'bold cyan'
detect_files = ['daml.yaml']
# detect_extensions = []
# detect_folders = []

# daml example'
# [daml]
# format = 'via [D $version](bold bright-green) '

# The dart module shows the currently installed version of Dart.
[dart]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üéØ '
detect_extensions = ['dart']
detect_files = ['pubspec.yaml', 'pubspec.yml', 'pubspec.lock']
detect_folders = ['.dart_tool']
style = 'bold blue'

# dart example
# [dart]
# format = 'via [üî∞ $version](bold red) '

# The deno module shows you your currently installed version of Deno.
[deno]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'ü¶ï '
detect_files = ['deno.json', 'deno.jsonc', 'mod.ts', 'mod.js', 'deps.ts', 'deps.js']
style = 'green bold'
# detect_extensions = []
# deno.detect_folders = []

# deno example
# [deno]
# format = 'via [ü¶ï $version](green bold) '

# The directory module shows the path to your current directory, 
# truncated to three parent folders.
[directory]
disabled = false
truncation_length = 3
truncate_to_repo = true
format = '[$path]($style)[$read_only]($read_only_style) '
style = 'bold cyan'
read_only = 'üîí'
read_only_style = 'red'
truncation_symbol = ''
#before_repo_root_style = #commented out because usese style default
#repo_root_style = #commented out because uses style default
repo_root_format = '[$before_root_path]($before_repo_root_style)[$repo_root]($repo_root_style)[$path]($style)[$read_only]($read_only_style) '
home_symbol = '~'
use_os_path_sep = true

# directory example
# [directory]
# truncation_length = 8
# truncation_symbol = '‚Ä¶/'

# The direnv module shows the status of the current rc file if one is present.
[direnv]
disabled = true
format = '[$symbol$loaded/$allowed]($style) '
symbol = 'direnv '
style = 'bold orange'
detect_files = ['.envrc']
allowed_msg = 'allowed'
not_allowed_msg = 'not allowed'
denied_msg = 'denied'
loaded_msg = 'loaded'
unloaded_msg = 'not loaded'
# detect_extensions = []
# detect_folders = []

# direnv example
# [direnv]
# disabled = false

# The docker_context module shows the currently active Docker context if 
# it's not set to default or if the DOCKER_MACHINE_NAME, DOCKER_HOST or 
# DOCKER_CONTEXT environment variables are set (as they are meant 
# to override the context in use).
[docker_context]
disabled = false
format = 'via [$symbol$context]($style) '
symbol = 'üê≥ '
only_with_files = true
detect_files = ['docker-compose.yml', 'docker-compose.yaml', 'Dockerfile']
style = 'blue bold'
# detect_extensions = []
# detect_folders = []

# docker_context example
# [docker_context]
# format = 'via [üêã $context](blue bold)'

# The dotnet module shows the relevant version of the .NET Core SDK for 
# the current directory.
[dotnet]
disabled = false
format = 'via [$symbol($version )(üéØ $tfm )]($style)'
version_format = 'v${raw}'
symbol = '.NET '
heuristic = true
detect_extensions = ['csproj', 'fsproj', 'xproj']
detect_files = ['global.json', 'project.json', 'Directory.Build.props', 'Directory.Build.targets', 'Packages.props']
style = 'bold blue'
# detect_folders = []

# dotnet example
# [dotnet]
# symbol = 'ü•Ö '
# style = 'green'
# heuristic = false

# The elixir module shows the currently installed version of Elixir 
# and Erlang/OTP.
[elixir]
disabled = false
format = 'via [$symbol($version \(OTP $otp_version\) )]($style)'
version_format = 'v${raw}'
symbol = 'üíß '
detect_files = ['mix.exs']
style = 'bold purple'
detect_extensions = []
detect_folders = []

# elixir example
# [elixir]
# symbol = 'üîÆ '

# The elm module shows the currently installed version of Elm.
[elm]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üå≥ '
detect_extensions = ['elm']
detect_files = ['elm.json', 'elm-package.json', '.elm-version']
detect_folders = ['elm-stuff']
style = 'cyan bold'

# elm example
# [elm]
# format = 'via [Óò¨ $version](cyan bold) '

# The env_var module displays the current value of a selected 
# environment variables.
# [env_var]

# #skipped this module as it has a lot of potential options for all modules
# pretty specific use case.

#env_var example
# [env_var]
# variable = 'SHELL'
# default = 'unknown shell'

# Displaying multiple environmental variables:
# [env_var.SHELL]
# variable = 'SHELL'
# default = 'unknown shell'
# [env_var.USER]
# default = 'unknown user'

# The erlang module shows the currently installed version of Erlang/OTP.
[erlang]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'Óû± '
style = 'bold red'
detect_files = ['rebar.config', 'elang.mk']
# detect_extensions = []
# detect_folders = []

# erlang Example
# [erlang]
# format = 'via [e $version](bold red) '

# The fennel module shows the currently installed version of Fennel.
[fennel]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üßÖ '
style = 'bold green'
detect_extensions = ['fnl']
# detect_files = []
# detect_folders = []

# fennel Example
# [fennel]
# symbol = '‚´∞ '

# The fill module fills any extra space on the line with a symbol. 
# If multiple fill modules are present in a line they will split 
# the space evenly between them.
[fill]
disabled = false
symbol = '.' #change this to a space to just fill with nothing.
style = 'bold black'

# fill example
# format = 'AA $fill BB $fill CC'

# [fill]
# symbol = '-'
# style = 'bold green'
# Produces a prompt that looks like:


# AA -------------------------------------------- BB -------------------------------------------- CC

# The fossil_branch module shows the name of the active branch of the 
# check-out in your current directory.
[fossil_branch]
disabled = true
format = 'on [$symbol$branch]($style) '
symbol = 'ÓÇ† '
style = 'bold purple'
# truncation_length = 2^63 - 1
truncation_symbol = '‚Ä¶'

# fossil_branch example
# [fossil_branch]
# symbol = 'ü¶é '
# truncation_length = 4
# truncation_symbol = ''

# The fossil_metrics module will show the number of added and deleted 
# lines in the check-out in your current directory.
[fossil_metrics]
disabled = true
format = '([+$added]($added_style) )([-$deleted]($deleted_style) )'
added_style = 'bold green'
deleted_style = 'bold red'
only_nonzero_diffs = true

# fossil_metrics example
# [fossil_metrics]
# added_style = 'bold blue'
# format = '[+$added]($added_style)/[-$deleted]($deleted_style) '

# The gcloud module shows the current configuration for gcloud CLI.
[gcloud]
disabled = false
format = 'on [$symbol$account(@$domain)(\($region\))]($style) '
symbol = '‚òÅÔ∏è '
style = 'bold blue'
# region_aliases = []
# project_aliases = []
# detect_env_vars = []

# gclound exmaples
# Display account and project
# [gcloud]
# format = 'on [$symbol$account(@$domain)(\($project\))]($style) '

# Display active config name only
# [gcloud]
# format = '[$symbol$active]($style) '
# style = 'bold yellow'

# Display account and aliased region
# [gcloud]
# symbol = 'Ô∏èüá¨Ô∏è '
# [gcloud.region_aliases]
# us-central1 = 'uc1'
# asia-northeast1 = 'an1'

# Display account and aliased project
# [gcloud]
# format = 'on [$symbol$account(@$domain)(\($project\))]($style) '
# [gcloud.project_aliases]
# very-long-project-name = 'vlpn'

# The git_branch module shows the active branch of the repo in your current directory.
[git_branch]
disabled = false
always_show_remote = false
format = 'on [$symbol$branch(:$remote_branch)]($style) '
symbol = 'ÓÇ† '
style = 'bold purple'
# truncation_length = 2^63 - 1
truncation_symbol = '‚Ä¶'
only_attached = false

# git_branch example
# [git_branch]
# symbol = 'üå± '
# truncation_length = 4
# truncation_symbol = ''
# ignore_branches = ['master', 'main']

# The git_commit module shows the current commit hash and also the tag (if any) 
# of the repo in your current directory.
[git_commit]
disabled = false
commit_hash_length = 7
format = '[\($hash$tag\)]($style) '
style = 'bold green'
only_detached = true
tag_disabled = true
tag_max_candidates = 0
tag_symbol = ' üè∑ '

# git comit example
# [git_commit]
# commit_hash_length = 4
# tag_symbol = 'üîñ '

# The git_state module will show in directories which are part of a git 
# repository, and where there is an operation in progress, such as: 
# REBASING, BISECTING, etc.
[git_state]
disabled = false
rebase = 'REBASING'
merge = 'MERGING'
revert = 'REVERTING'
cherry_pick = 'CHERRY-PICKING'
bisect = 'BISECTING'
am = 'AM'
am_or_rebase = 'AM/REBASE'
style = 'bold yellow'
format = '\([$state( $progress_current/$progress_total)]($style)\) '

# git state example
# [git_state]
# format = '[\($state( $progress_current of $progress_total)\)]($style) '
# cherry_pick = '[üçí PICKING](bold red)'

# The git_metrics module will show the number of added and deleted lines 
# in the current git repository.
[git_metrics]
disabled = true
added_style = 'bold green'
deleted_style = 'bold red'
only_nonzero_diffs = true
format = '([+$added]($added_style) )([-$deleted]($deleted_style) )'
ignore_submodules = false

# git_metrics example
# [git_metrics]
# added_style = 'bold blue'
# format = '[+$added]($added_style)/[-$deleted]($deleted_style) '

# The git_status module shows symbols representing the state of the 
# repo in your current directory.
[git_status]
disabled = false
format = '([\[$all_status$ahead_behind\]]($style) )'
conflicted = '='
ahead = '‚á°'
behind = '‚á£'
diverged = '‚áï'
up_to_date = ''
untracked = '?'
stashed = '$'
modified = '!'
staged = '+'
renamed = '¬ª'
deleted = '‚úò'
typechanged = ""
style = 'bold red'
ignore_submodules = false

# git_status examples
# [git_status]
# conflicted = 'üè≥'
# ahead = 'üèéüí®'
# behind = 'üò∞'
# diverged = 'üòµ'
# up_to_date = '‚úì'
# untracked = 'ü§∑'
# stashed = 'üì¶'
# modified = 'üìù'
# staged = '[++\($count\)](green)'
# renamed = 'üëÖ'
# deleted = 'üóë'

# Show ahead/behind count of the branch being tracked
# [git_status]
# ahead = '‚á°${count}'
# diverged = '‚áï‚á°${ahead_count}‚á£${behind_count}'
# behind = '‚á£${count}'

# Use Windows Starship executable on Windows paths in WSL
# [git_status]
# windows_starship = '/mnt/c/Users/username/scoop/apps/starship/current/starship

# The gleam module shows the currently installed version of Gleam.
[gleam]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = '‚≠ê '
detect_extensions = ['gleam']
detect_files = ['gleam.toml']
style = 'bold #FFAFF3'

# gleam Example
# [gleam]
# format = 'via [‚≠ê $version](bold red) '

# The golang module shows the currently installed version of Go.
[golang]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üêπ '
detect_extensions = ['go']
detect_files = ['go.mod', 'go.sum', 'go.work', 'glide.yaml', 'Gopkg.yml', 'Gopkg.lock', '.go-version']
detect_folders = ['Godeps']
style = 'bold cyan'
not_capable_style = 'bold red'

# golang Examples
# [golang]
# format = 'via [üèéüí® $version](bold cyan) '

# Using mod_version
# [golang]
# format = 'via [$symbol($version )($mod_version )]($style)'

# The guix_shell module shows the guix-shell environment. The module will 
# be shown when inside a guix-shell environment.
[guix_shell]
disabled = false
format = 'via [$symbol]($style) '
symbol = 'üêÉ '
style = 'yellow bold'

# guix_shell Example
# [guix_shell]
# disabled = true
# format = 'via [üêÇ](yellow bold) '

# The gradle module shows the version of the Gradle Wrapper currently 
# used in the project directory.
[gradle] # no exmaples given in config
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üÖ∂ '
detect_extensions = ['gradle', 'gradle.kts']
detect_folders = ['gradle']
style = 'bold bright-cyan'
recursive = false
# detect_files = []

# The haskell module finds the current selected GHC version and/or the 
# selected Stack snapshot.
[haskell] #no exmaples given in config
disabled = false
format = 'via [$symbol($version )]($style)'
symbol = 'Œª '
detect_extensions = ['hs', 'cabal', 'hs-boot']
detect_files = ['stack.yaml', 'cabal.project']
style = 'bold purple'
# detect_folders = []

# The haxe module shows the currently installed version of Haxe.
[haxe]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
detect_extensions = ['hx', 'hxml']
detect_files = ['project.xml', 'Project.xml', 'application.xml', 'haxelib.json', 'hxformat.json', '.haxerc']
detect_folders = ['.haxelib', 'haxe_libraries']
symbol = '‚åò '
style = 'bold fg:202'

# haxe example
# [haxe]
# format = "via [‚åò $version](bold fg:202) "

# The helm module shows the currently installed version of Helm.
[helm]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
detect_files = ['helmfile.yaml', 'Chart.yaml']
symbol = '‚éà '
style = 'bold white'
# detect_extensions = []
# detect_folders = []

# helm Example
# [helm]
# format = 'via [‚éà $version](bold white) '

# The hostname module shows the system hostname.
[hostname]
disabled = false
ssh_only = true #change to false if you want hostname to show all the Time
ssh_symbol = 'üåê '
trim_at = '.'
# detect_env_vars = [] #see Example
format = '[$ssh_symbol$hostname]($style) in '
style = 'bold dimmed green'

# hostname Examples
# Always show the hostname
# [hostname]
# ssh_only = false
# format = '[$ssh_symbol](bold blue) on [$hostname](bold red) '
# trim_at = '.companyname.com'
# disabled = false

# Hide the hostname in remote tmux sessions
# [hostname]
# ssh_only = false
# detect_env_vars = ['!TMUX', 'SSH_CONNECTION']
# disabled = false

# The java module shows the currently installed version of Java.
[java]
disabled = false
format = 'via [${symbol}(${version} )]($style)'
version_format = 'v${raw}'
detect_extensions = ['java', 'class', 'gradle', 'jar', 'cljs', 'cljc']
detect_files = ['pom.xml', 'build.gradle.kts', 'build.sbt', '.java-version', 'deps.edn', 'project.clj', 'build.boot', '.sdkmanrc']
# detect_folders = []
symbol = '‚òï '
style = 'red dimmed'

# java example
# [java]
# symbol = 'üåü '

# The jobs module shows the current number of jobs running.
[jobs]
disabled = false
symbol_threshold = 1
number_threshold = 2
format = '[$symbol$number]($style) '
symbol = '‚ú¶'
style = 'bold blue'

# jobs example
# [jobs]
# symbol = '+ '
# number_threshold = 4
# symbol_threshold = 0

# The julia module shows the currently installed version of Julia.
[julia]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
detect_extensions = ['jl']
detect_files = ['Project.toml', 'Manifest.toml']
# detect_folders = []
symbol = '‡ÆÉ '
style = 'bold purple'

# julia example
# [julia]
# symbol = '‚à¥ '

# The kotlin module shows the currently installed version of Kotlin.
[kotlin]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
detect_extensions = ['kt', 'kts']
# detect_files = []
# detect_folders = []
symbol = 'üÖ∫ '
style = 'bold blue'
kotlin_binary = 'kotlin'

# kotlin Examples
# [kotlin]
# symbol = 'üÖ∫ '

# [kotlin]
# # Uses the Kotlin Compiler binary to get the installed version
# kotlin_binary = 'kotlinc'

# Displays the current Kubernetes context name and, if set, the 
# namespace, user and cluster from the kubeconfig file.
[kubernetes]
disabled = true
symbol = '‚ò∏ '
format = '[$symbol$context( \($namespace\))]($style) in '
style = 'cyan bold'
# detect_extensions = []
# detect_files = []
# detect_folders = []
# detect_env_vars = []
# contexts = []

# kubernetes Examples
# [kubernetes]
# format = 'on [‚õµ ($user on )($cluster in )$context \($namespace\)](dimmed green) '
# disabled = false
# contexts = [
  # { context_pattern = "dev.local.cluster.k8s", style = "green", symbol = "üíî " },
# ]

# Only show the module in directories that contain a k8s file.
# [kubernetes]
# disabled = false
# detect_files = ['k8s']

# Kubernetes Context specific config
# [[kubernetes.contexts]]
# # "bold red" style + default symbol when Kubernetes current context name equals 
# # "production" *and* the current user
# # equals "admin_user"
# context_pattern = "production"
# user_pattern = "admin_user"
# style = "bold red"
# context_alias = "prod"
# user_alias = "admin"

# [[kubernetes.contexts]]
# # "green" style + a different symbol when Kubernetes current context name 
# # contains openshift
# context_pattern = ".*openshift.*"
# style = "green"
# symbol = "üíî "
# context_alias = "openshift"

# [[kubernetes.contexts]]
# # Using capture groups
# # Contexts from GKE, AWS and other cloud providers usually carry additional 
# # information, like the region/zone.
# # The following entry matches on the GKE format (`gke_projectname_zone_cluster-name`)
# # and renames every matching kube context into a more readable format (`gke-cluster-name`):
# context_pattern = "gke_.*_(?P<cluster>[\\w-]+)"
# context_alias = "gke-$cluster"

# The line_break module separates the prompt into two lines.
[line_break]
disabled = false

# line_break example
# [line_break]
# disabled = true #two line prompt

# The localip module shows the IPv4 address of the primary network interface.
[localip]
disabled = true #set to false to show in ssh unless see next line
ssh_only = true #set to false to show all the time
format = '[$localipv4]($style) '
style = 'bold yellow'

# localip example
# [localip]
# ssh_only = false
# format = '@[$localipv4](bold red) '
# disabled = false

# The lua module shows the currently installed version of Lua.
[lua]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üåô '
detect_extensions = ['lua']
detect_files = ['.lua-version']
detect_folders = ['lua']
style = 'bold blue'
lua_binary = 'lua'

# lua example
# [lua]
# format = 'via [üåï $version](bold blue) '

# The memory_usage module shows current system memory and swap usage.
[memory_usage]
disabled = true
threshold = 75
format = 'via $symbol [${ram}( | ${swap})]($style) '
symbol = 'üêè'
style = 'bold dimmed white'

# memory_usage example
# [memory_usage]
# disabled = false
# threshold = -1
# symbol = ' '
# style = 'bold dimmed green'

# The meson module shows the current Meson developer environment status.
[meson]
disabled = false
# truncation_length = 2^32 - 1
truncation_symbol = '‚Ä¶'
format = 'via [$symbol$project]($style) '
symbol = '‚¨¢ '
style = 'blue bold'

# meson example
# [meson]
# disabled = false
# truncation_symbol = '--'
# symbol = ' '
# style = 'bold dimmed green'

# The hg_branch module shows the active branch and topic of the repo in your 
# current directory.
[hg_branch]
disabled = true
symbol = 'ÓÇ† '
style = 'bold purple'
format = 'on [$symbol$branch(:$topic)]($style) '
# truncation_length = 2^63 - 1
truncation_symbol = '‚Ä¶'

# hg_branch exmaple
# [hg_branch]
# format = 'on [üå± $branch](bold purple)'
# truncation_length = 4
# truncation_symbol = ''

# The nats module shows the name of the current NATS context.
[nats]
disabled = false
symbol = '‚úâÔ∏è '
style = 'bold purple'
format = '[$symbol$name]($style)'

# nats example
# [nats]
# format = '[$symbol]($style)'
# style = 'bold purple'

# The nim module shows the currently installed version of Nim.
[nim]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üëë '
detect_extensions = ['nim', 'nims', 'nimble']
detect_files = ['nim.cfg']
# detect_folders = []
style = 'bold yellow'

# nim example
# [nim]
# style = 'yellow'
# symbol = 'üé£ '

# The nix_shell module shows the nix-shell environment.
[nix_shell]
disabled = false
format = 'via [$symbol$state( \($name\))]($style) '
symbol = '‚ùÑÔ∏è '
style = 'bold blue'
impure_msg = 'impure'
pure_msg = 'pure'
unknown_msg = ''
heuristic = false

# nix_shell example
# [nix_shell]
# disabled = true
# impure_msg = '[impure shell](bold red)'
# pure_msg = '[pure shell](bold green)'
# unknown_msg = '[unknown shell](bold yellow)'
# format = 'via [‚òÉÔ∏è $state( \($name\))](bold blue) '

# The nodejs module shows the currently installed version of Node.js.
[nodejs]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'Óúò '
detect_extensions = ['js', 'mjs', 'cjs', 'ts', 'mts', 'cts']
detect_files = ['package.json', '.node-version']
detect_folders = ['node_modules']
style = 'bold green'
not_capable_style = 'bold red'

# nodejs example
# [nodejs]
# format = 'via [ü§ñ $version](bold green) '

# The ocaml module shows the currently installed version of OCaml.
[ocaml]
disabled = false
format = 'via [$symbol($version )(\($switch_indicator$switch_name\) )]($style)'
version_format = 'v${raw}'
symbol = 'üê´ '
global_switch_indicator = ''
local_switch_indicator = '*'
detect_extensions = ['opam', 'ml', 'mli', 're', 'rei']
detect_files = ['dune', 'dune-project', 'jbuild', 'jbuild-ignore', '.merlin']
detect_folders = ['_opam', 'esy.lock']
style = 'bold yellow'

# ocaml exmaple
# [ocaml]
# format = 'via [üê™ $version]($style) '

# The 'odin' module shows the currently installed version of Odin.
[odin]
disabled = false
format = 'via [$symbol($version )]($style)'
show_commit = false
symbol = '√ò '
style = 'bold bright-blue'
detect_extensions = ['odin']
detect_files = []
detect_folders = []

# odin exmaple
# [odin]
# format = 'via [Û∞π© ($version )]($style)'
# show_commit = true

# The opa module shows the currently installed version of the OPA tool.
[opa]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'ü™ñ '
detect_extensions = ['rego']
# detect_files = []
# detect_folders = []
style = 'bold blue'

# opa example
# [opa]
# format = 'via [‚õëÔ∏è  $version](bold red) '

# The openstack module shows the current OpenStack cloud and project.
[openstack]
disabled = false
format = 'on [$symbol$cloud(\($project\))]($style) '
symbol = '‚òÅÔ∏è '
style = 'bold yellow'

# openstack example
# [openstack]
# format = 'on [$symbol$cloud(\($project\))]($style) '
# style = 'bold yellow'
# symbol = '‚òÅÔ∏è '

# The os module shows the current operating system.
[os]
disabled = true
format = '[$symbol]($style)'
style = 'bold white'
[os.symbols]
AIX = "‚ûø "
Alpaquita = "üîî "
AlmaLinux = "üí† "
Alpine = "üèîÔ∏è "
Amazon = "üôÇ "
Android = "ü§ñ "
Arch = "üéóÔ∏è "
Artix = "üéóÔ∏è "
CentOS = "üí† "
Debian = "üåÄ "
DragonFly = "üêâ "
Emscripten = "üîó "
EndeavourOS = "üöÄ "
Fedora = "üé© "
FreeBSD = "üòà "
Garuda = "ü¶Ö "
Gentoo = "üóúÔ∏è "
HardenedBSD = "üõ°Ô∏è "
Illumos = "üê¶ "
Kali = "üêâ "
Linux = "üêß "
Mabox = "üì¶ "
Macos = "üçé "
Manjaro = "ü•≠ "
Mariner = "üåä "
MidnightBSD = "üåò "
Mint = "üåø "
NetBSD = "üö© "
NixOS = "‚ùÑÔ∏è "
OpenBSD = "üê° "
OpenCloudOS = "‚òÅÔ∏è "
openEuler = "ü¶â "
openSUSE = "ü¶é "
OracleLinux = "ü¶¥ "
Pop = "üç≠ "
Raspbian = "üçì "
Redhat = "üé© "
RedHatEnterprise = "üé© "
RockyLinux = "üí† "
Redox = "üß™ "
Solus = "‚õµ "
SUSE = "ü¶é "
Ubuntu = "üéØ "
Ultramarine = "üî∑ "
Unknown = "‚ùì "
Void = "Óäô  "
Windows = "ü™ü "

# os Examples
# [os]
# format = "on [($name )]($style)"
# style = "bold blue"
# disabled = false

# [os.symbols]
# Windows = "Óò™ "
# Arch = "Arch is the best! "

# The package module is shown when the current directory is the repository 
# for a package, and shows its current version.The module currently supports 
# npm, nimble, cargo, poetry, python, composer, gradle, julia, mix, helm, 
# shards, daml and dart packages.
[package]
disabled = false
format = 'is [$symbol$version]($style) '
symbol = 'üì¶ '
version_format = 'v${raw}'
style = 'bold 208'
display_private = false

# package exmaple
# [package]
# format = 'via [üéÅ $version](208 bold) '

# The perl module shows the currently installed version of Perl.
[perl]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üê™ '
detect_extensions = ['pl', 'pm', 'pod']
detect_files = ['Makefile.PL', 'Build.PL', 'cpanfile', 'cpanfile.snapshot', 'META.json', 'META.yml', '.perl-version']
# detect_folders = []
style = 'bold 149'

# perl example
# [perl]
# format = 'via [ü¶™ $version]($style) '

# The php module shows the currently installed version of PHP. 
[php]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üêò '
detect_extensions = ['php']
detect_files = ['composer.json', '.php-version']
# detect_folders = []
style = '147 bold'

# php example
# [php]
# format = 'via [üîπ $version](147 bold) '

# The pijul_channel module shows the active channel of the repo in your current directory.
[pijul_channel] #no example provided
disabled = true
symbol = 'ÓÇ† '
style = 'bold purple'
format = 'on [$symbol$channel]($style) '
# truncation_length = 2^63 - 1
truncation_symbol = '‚Ä¶'

# The pulumi module shows the current username, selected Pulumi Stack, and version.
[pulumi]
disabled = false
format = 'via [$symbol($username@)$stack]($style) '
version_format = 'v${raw}'
symbol = 'ÔÜ≤ '
style = 'bold 5'
search_upwards = true

# pulumi exmaples
# With Pulumi Version
# [pulumi]
# format = '[üõ• ($version )$stack]($style) '

# Without Pulumi version
# [pulumi]
# symbol = 'üõ• '
# format = '[$symbol$stack]($style) '

# The purescript module shows the currently installed version of PureScript version.
[purescript]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = '<=> '
detect_extensions = ['purs']
detect_files = ['spago.dhall']
# detect_folders = []
style = 'bold white'

# purescript example
# [purescript]
# format = 'via [$symbol$version](bold white)'

# The python module shows the currently installed version of Python 
# and the current Python virtual environment if one is activated.
[python]
disabled = false
format = 'via [${symbol}${pyenv_prefix}(${version} )(\($virtualenv\) )]($style)'
version_format = 'v${raw}'
symbol = 'üêç '
style = 'yellow bold'
pyenv_version_name = false
pyenv_prefix = 'pyenv'
python_binary = ['python', 'python3', 'python2']
detect_extensions = ['py']
detect_files = ['.python-version', 'Pipfile', '__init__.py', 'pyproject.toml', 'requirements.txt', 'setup.py', 'tox.ini']
# detect_folders = []

# python Examples
# [python]
# symbol = 'üëæ '
# pyenv_version_name = true

# [python]
# # Only use the `python3` binary to get the version.
# python_binary = 'python3'

# [python]
# # Don't trigger for files with the py extension
# detect_extensions = []

# The quarto module shows the current installed version of Quarto used in a project.
[quarto] #no example given
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = '‚®Å '
style = 'bold #75AADB'
detect_extensions = ['.qmd']
detect_files = ['_quarto.yml']
# detect_folders = []

# The rlang module shows the currently installed version of R. 
[rlang]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üìê'
style = 'blue bold'
detect_extensions = ['R', 'Rd', 'Rmd', 'Rproj', 'Rsx']
detect_files = ['.Rprofile']
detect_folders = ['.Rproj.user']

# rlang example
# [rlang]
# format = 'with [üìê $version](blue bold) '

# The raku module shows the currently installed version of Raku. 
[raku]
disabled = false
format = 'via [$symbol($version-$vm_version )]($style)'
version_format = 'v${raw}'
symbol = 'ü¶ã '
detect_extensions = ['p6', 'pm6', 'pod6', 'raku', 'rakumod']
detect_files = ['META6.json']
# detect_folders = []
style = 'bold 149'

# raku example
# [raku]
# format = 'via [ü¶™ $version]($style) '

# By default the red module shows the currently installed version of Red. 
[red]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üî∫ '
detect_extensions = ['red']
# detect_files = []
# detect_folders = []
style = 'red bold'

# red example
# [red]
# symbol = 'üî¥ '

# By default the ruby module shows the currently installed version of Ruby.
[ruby]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üíé '
detect_extensions = ['rb']
detect_files = ['Gemfile', '.ruby-version']
# detect_folders = []
detect_variables = ['RUBY_VERSION', 'RBENV_VERSION']
style = 'bold red'

# ruby example
# [ruby]
# symbol = 'üî∫ '

# By default the rust module shows the currently installed version of Rust. 
[rust]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'ü¶Ä '
detect_extensions = ['rs']
detect_files = ['Cargo.toml']
# detect_folders = []
style = 'bold red'

# rust example
# [rust]
# format = 'via [‚öôÔ∏è $version](red bold)'

# The scala module shows the currently installed version of Scala. 
[scala]
disabled = false
format = 'via [${symbol}(${version} )]($style)'
version_format = 'v${raw}'
detect_extensions = ['sbt', 'scala']
detect_files = ['.scalaenv', '.sbtenv', 'build.sbt']
detect_folders = ['.metals']
symbol = 'üÜÇ '
style = 'red dimmed'

# scala example
# [scala]
# symbol = 'üåü '

# The shell module shows an indicator for currently used shell.
[shell]
disabled = true
bash_indicator = 'bsh'
fish_indicator = 'fsh'
zsh_indicator = 'zsh'
powershell_indicator = 'psh'
# pwsh_indicator = '' #default mirrors powershell_indicator
ion_indicator = 'ion'
elvish_indicator = 'esh'
tcsh_indicator = 'tsh'
xonsh_indicator = 'xsh'
cmd_indicator = 'cmd'
nu_indicator = 'nu'
unknown_indicator = ''
format = '[$indicator]($style) '
style = 'white bold'

# shell example
# [shell]
# fish_indicator = 'Û∞à∫ '
# powershell_indicator = 'Ôë†_'
# unknown_indicator = 'mystery shell'
# style = 'cyan bold'
# disabled = false

# The shlvl module shows the current SHLVL ('shell level') environment 
# variable, if it is set to a number and meets or exceeds the specified 
# threshold.
[shlvl]
disabled = true
threshold = 2
format = '[$symbol$shlvl]($style) '
symbol = '‚ÜïÔ∏è '
repeat = false
repeat_offset = 0
style = 'bold yellow'

# shlvl Examples
# [shlvl]
# disabled = false
# format = '$shlvl level(s) down'
# threshold = 3

# [shlvl]
# disabled = false
# format = '[$symbol$shlvl]($style)'
# repeat = true
# symbol = '‚ùØ'
# repeat_offset = 1
# threshold = 0

# The singularity module shows the current Singularity image
[singularity]
disabled = false
format = '[$symbol\[$env\]]($style) '
symbol = ''
style = 'bold dimmed blue'

# singularity exmaple
# [singularity]
# format = '[üì¶ \[$env\]]($style) '

# The solidity module shows the currently installed version of Solidity 
[solidity]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${major}.${minor}.${patch}'
symbol = 'S '
compiler = ['solc']
detect_extensions = ['sol']
# detect_files = []
# detect_folders = []
style = 'bold blue'

# solidity example
# [solidity]
# format = "via [S $version](blue bold)"

# The spack module shows the current Spack environment
[spack]
disabled = false
truncation_length = 1
symbol = 'üÖ¢ '
style = 'bold blue'
format = 'via [$symbol$environment]($style) '

# spack example
# [spack]
# format = '[$symbol$environment](dimmed blue) '

# The status module displays the exit code of the previous command.
[status]
disabled = true
format = '[$symbol$status]($style) '
symbol = '‚ùå'
success_symbol = ''
not_executable_symbol = 'üö´'
not_found_symbol = 'üîç'
sigint_symbol = 'üß±'
signal_symbol = '‚ö°'
style = 'bold red'
recognize_signal_code = true
map_symbol = false
pipestatus = false
pipestatus_separator = '|'
# pipestatus_segment_format	= '' # When specified, replaces format when formatting 
                                 # pipestatus segments
# 
# status example
# [status]
# style = 'bg:blue'
# symbol = 'üî¥ '
# success_symbol = 'üü¢ SUCCESS'
# format = '[\[$symbol$common_meaning$signal_name$maybe_int\]]($style) '
# map_symbol = true
# disabled = false

# The sudo module displays if sudo credentials are currently cached.
[sudo]
disabled = true #false to show
format = '[as $symbol]($style)'
symbol = 'üßô '
style = 'bold blue'
allow_windows = false

# sudo Examples
# [sudo]
# style = 'bold green'
# symbol = 'üë©‚Äçüíª '
# disabled = false

# [sudo]
# allow_windows = true
# disabled = false

# By default the swift module shows the currently installed version of Swift.
[swift]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'üê¶ '
detect_extensions = ['swift']
detect_files = ['Package.swift']
# detect_folders = []
style = 'bold 202'

# swift example
# [swift]
# format = 'via [üèé  $version](red bold)'

# The terraform module shows the currently selected Terraform workspace and version.
[terraform]
disabled = false
format = 'via [$symbol$workspace]($style) '
version_format = 'v${raw}'
symbol = 'üí†'
detect_extensions = ['tf', 'tfplan', 'tfstate']
# detect_files = []
detect_folders = ['.terraform']
style = 'bold 105'

# terraform Examples
# With Terraform Version
# [terraform]
# format = '[üèéüí® $version$workspace]($style) '

# Without Terraform version
# [terraform]
# format = '[üèéüí® $workspace]($style) '

# The time module shows the current local time.
[time]
disabled = true
format = 'at [$time]($style) '
use_12hr = false
style = 'bold yellow'
utc_time_offset = 'local'
time_range = '-'

# time example
# [time]
# disabled = false
# format = 'üïô[\[ $time \]]($style) '
# time_format = '%T'
# utc_time_offset = '-5'
# time_range = '10:00:00-14:00:00'

# The typst module shows the current installed version of Typst used in a project.
[typst] # no example provided
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 't '
style = 'bold #0093A7'
detect_extensions = ['.typ']
detect_files = ['template.typ']
# detect_folders = []

# The username module shows active user's username.
[username]
disabled = false
style_root = 'bold red'
style_user = 'bold yellow'
# detect_env_vars = []
format = '[$user]($style) in '
show_always = false #set to true to see Always

# username example
# [username]
# style_user = 'white bold'
# style_root = 'black bold'
# format = 'user: [$user]($style) '
# disabled = false
# show_always = true
# aliases = { "corpuser034g" = "matchai" }

# The vagrant module shows the currently installed version of Vagrant. 
[vagrant]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = '‚ç± '
# detect_extensions = []
detect_files = ['Vagrantfile']
# detect_folders = []
style = 'cyan bold'

# vagrant example
# [vagrant]
# format = 'via [‚ç± $version](bold white) '

# The vlang module shows you your currently installed version of V. 
[vlang]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = 'V '
detect_extensions = ['v']
detect_files = ['v.mod', 'vpkg.json', '.vpkg-lock.json' ]
# detect_folders = []
style = 'blue bold'

# vlang example
# [vlang]
# format = 'via [V $version](blue bold) '

# The vcsh module displays the current active VCSH repository. 
[vcsh]
disabled = false
symbol = ''
style = 'bold yellow'
format = 'vcsh [$symbol$repo]($style) '

# vcsh example
# [vcsh]
# format = '[üÜÖ $repo](bold blue) '

# By default the zig module shows the currently installed version of Zig.
[zig]
disabled = false
format = 'via [$symbol($version )]($style)'
version_format = 'v${raw}'
symbol = '‚ÜØ '
style = 'bold yellow'
detect_extensions = ['zig']
# detect_files = []
# detect_folders = []

# zig example
# [zig]
# symbol = '‚ö°Ô∏è '

# The custom modules show the output of some arbitrary commands.
# worthing checking the config to much to list here

# custom command examples
# [custom.foo]
# command = 'echo foo' # shows output of command
# detect_files = ['foo'] # can specify filters but wildcards are not supported
# when = ''' test "$HOME" = "$PWD" '''
# format = ' transcending [$output]($style)'

# [custom.time]
# command = 'time /T'
# detect_extensions = ['pst'] # filters *.pst files
# shell = ['pwsh.exe', '-NoProfile', '-Command', '-']

# [custom.time-as-arg]
# command = 'time /T'
# detect_extensions = ['pst'] # filters *.pst files
# shell = ['pwsh.exe', '-NoProfile', '-Command']
# use_stdin = false

# A continuation prompt that displays two filled-in arrows
# Some shells support a continuation prompt along with the normal prompt. 
# This prompt is rendered instead of the normal prompt when the user has 
# entered an incomplete statement (such as a single left parenthesis or quote).
# continuation_prompt = '‚ñ∂‚ñ∂ ' #uncomment to use

